

Cliente-servidor

As aplicações existentes no servidor e no cliente devem ser separadas. Esse princípio REST trabalha com o conceito de que cliente e servidor devem ser isolados um do outro e ter permissão para desenvolver de forma independente.

Sem estado

As requisições são feitas de forma independente, ou seja, cada uma executa apenas uma determinada ação. Com este princípio REST, as APIs são sem estado, o que significa que as chamadas podem ser feitas independentemente umas das outras. 

Cache: 

API deve utilizar o cache para evitar chamadas recorrentes ao servidor. Os dados em uma resposta devem ser indiretamente ou categorizados como armazenáveis ou não armazenáveis em cache.


Interface uniforme:

Agrupa outros quatro conceitos em que determina que os recursos devem ser identificados, a manipulação dos recursos deve ser por meio de representação, com mensagens autodescritivas e utilizar links para navegar pelo aplicativo. otimiza toda a arquitetura do sistema e aumenta a visibilidade das comunicações. Para obter uma interface uniforme, vários controles de arquitetura são necessários para orientar o desempenho dos elementos dentro da arquitetura da API REST.

Sistema em camada

Devido ao seu sistema em camadas, um aplicativo tem melhor segurança, pois os componentes em cada camada não podem interagir fora da camada subsequente.
Um sistema de arquitetura REST API em camadas tem maior estabilidade porque restringe o desempenho do componente.

Código sob Demanda

Permite que codificação ou applets sejam comunicados por meio da API usada no aplicativo.
Uma definição da API REST permite estender a funcionalidade do cliente baixando e implementando a codificação na forma de applets ou scripts. Isso simplifica os clientes, diminuindo o número de recursos essenciais a serem pré-implementados.

